@page "/contacts"

@using System.Threading
@using System.Collections.ObjectModel
@using ContactTracker.Domain.Contacts
@using MudBlazor
@inject IContactService ContactService


<MudTable ServerData="ServerReload" Dense="true" Hover="true" @ref="table">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Contacts</MudText>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortLabel="PreferredName" T="Contact">PreferredName</MudTableSortLabel>
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="PreferredName">@context.PreferredName</MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private MudTable<Contact> table;

    private int totalItems;
    private string searchString = null;

    /// <summary>
    /// Here we simulate getting the paged, filtered and ordered data from the server
    /// </summary>
    private async Task<TableData<Contact>> ServerReload(TableState state, CancellationToken token)
    {
        IEnumerable<Contact> data = await ContactService.GetContactsAsync();

        await Task.Delay(300, token);
        data = data.Where(Contact =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (Contact.PreferredName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            return false;
        }).ToArray();
        totalItems = data.Count();
        switch (state.SortLabel)
        {
            case "PreferredName":
                data = state.SortDirection == SortDirection.Ascending 
                    ? data.OrderBy(o => o.PreferredName)
                    : data.OrderByDescending(o => o.PreferredName);
                break;
        }

        return new TableData<Contact>() { TotalItems = totalItems, Items = data };
    }

    private async Task OnSearch(string text)
    {
        searchString = text;
        await table.ReloadServerData();
    }
}