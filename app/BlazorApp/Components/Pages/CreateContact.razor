@page "/createcontact"
@using ContactTracker.Domain.Contacts
@inject IContactService ContactService

<EditForm Model="@newContact" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label for="firstName">First Name:</label>
        <InputText id="firstName" @bind-Value="newContact.FirstName" />
    </div>

    <div>
        <label for="lastName">Last Name:</label>
        <InputText id="lastName" @bind-Value="newContact.LastName" />
    </div>

    <div>
        <label for="preferredName">Preferred Name:</label>
        <InputText id="preferredName" @bind-Value="newContact.PreferredName" />
    </div>

    <div>
        <label for="occupation">Occupation:</label>
        <InputText id="occupation" @bind-Value="newContact.Occupation" />
    </div>

<div>
    <label>Interests:</label>
    @for (int i = 0; i < newContact.Interests.Count; i++)
    {
        int index = i;  // Capture the index for use in lambda
        <div>
            <InputText @bind-Value="newContact.Interests[index]" />
            <button type="button" @onclick="() => RemoveInterest(index)">Remove</button>
        </div>
    }
    <button type="button" @onclick="AddInterest">Add Interest</button>
</div>
    <div>
        <label for="relationship">Relationship:</label>
        <InputSelect id="relationship" @bind-Value="newContact.Relationship">
            @foreach (var relationship in Enum.GetValues(typeof(Relationships)))
            {
                <option value="@relationship">@relationship</option>
            }
        </InputSelect>
    </div>

    <button type="submit">Create Contact</button>
</EditForm>

@code {
    public CreateContactDto newContact = new CreateContactDto
    {
        FirstName = null,
        LastName = null,
        PreferredName = "",
        Occupation = null,
        Interests = new List<string>(),
        Relationship = Relationships.Friend
    };
    
    private void AddInterest()
    {
        newContact.Interests.Add("");
    }

    private void RemoveInterest(int index)
    {
        newContact.Interests.RemoveAt(index);
    }

    private async Task HandleValidSubmit()
    {
        // Call your service to create the contact
        await ContactService.CreateContactAsync(newContact);
        // Reset the form or navigate away
        newContact = new CreateContactDto
        {
            FirstName = null,
            LastName = null,
            PreferredName = "",
            Occupation = null,
            Interests = new List<string>(),
            Relationship = Relationships.Friend
        };
    }
}