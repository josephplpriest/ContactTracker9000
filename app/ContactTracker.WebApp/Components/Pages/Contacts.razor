@page "/listcontacts"

@using System.Threading
@using System.Collections.ObjectModel
@using ContactTracker.Domain.Contacts
@using MudBlazor
@inject NavigationManager NavigationManager
@inject IContactService ContactService

<MudTable Items="@contacts" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<Contact,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Contacts</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel
            SortBy="new Func <Contact, object>(contact => contact.PreferredName)">       
            Preferred Name
            </MudTableSortLabel></MudTh>
        <MudTh>First Name</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="PreferredName">@context.PreferredName</MudTd>
        <MudTd DataLabel="FirstName">@context.FirstName</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

<div class="d-flex flex-wrap mt-4">
    <MudSwitch @bind-Value="hover" Color="Color.Primary">Hover</MudSwitch>
    <MudSwitch @bind-Value="dense" Color="Color.Secondary">Dense</MudSwitch>
    <MudSwitch @bind-Value="striped" Color="Color.Tertiary">Striped</MudSwitch>
    <MudSwitch @bind-Value="bordered" Color="Color.Warning">Bordered</MudSwitch>
    <MudSpacer />
    <div style="min-width:200px;">
        <MudText Class="align-self-center d-inline">Selected1: @selectedItem1?.Id</MudText>
    </div>
</div>
<div>
    <MudTd>
        <button type="button" class="btn btn-secondary btn-sm" @onclick="@(() => NavigationManager.NavigateTo("/createcontact"))">Create Contact</button>
    </MudTd>
</div>
@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";
    private Contact selectedItem1 = null;
    private HashSet<Contact> selectedItems = new HashSet<Contact>();

    private IEnumerable<Contact> contacts = new List<Contact>();

    protected override async Task OnInitializedAsync()
    {
        contacts = await ContactService.GetContactsAsync();
    }

    private bool FilterFunc1(Contact contact) => FilterFunc(contact, searchString1);

    private bool FilterFunc(Contact contact, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (contact.PreferredName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}